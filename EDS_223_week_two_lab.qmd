---
title: "EDS_223_week_two_lab"
format: html
editor: visual
---

## Load Necessary Libraries

```{r}
#this clears out the environment
rm(list = ls())

#load necessary data packages
library(sf)
library(tidyverse)
library(spData)
library(tmap)

```

# Building Sample Data
```{r}
#create a sfg
london_point <- st_point(c(0.1, 51.5)) #longitude = 0.1 and latitude = 51.5

#create a sfc
london_geom <- st_sfc(london_point, crs = 4326) #use crs to define the coordinate system

#create a dataframe that you can attach the geometry to
london_attrib <- data.frame(name = "London",
                            temperature = 25,
                            data = as.Date("2017-06-21"))

#create a sf object with the sfg (the point) and the sfc (the geometry)
london_sf <- st_sf(london_attrib, geometry = london_geom)

#check the class of the object
##this is a good step to include in the workflow 
class(london_sf)

#another good thing to check is the coordinate reference system
st_crs(london_sf)

#you can also make this easier to digest by using the below command which returns a logical statement 
st_crs(london_sf)$IsGeographic

```



```{r}
#load in spData for the world 
world <- spData::world

#shows us the names of the columns 
names(world)

#treats the sf dataframe like a normal dataframe instead of a different data structure
summary(world$lifeExp)

#try to remove the geometry column from the world using the normal convention 
##the geometries are sticky so that are difficult to remove from the dataset
world_df <- world %>%
  select(-geom)


#here is the function to actually remove the geometry from the dataframe
world_df <- st_drop_geometry(world)

#verify that is worked by checking the class
class(world_df)

```

# Reprojecting Data
```{r}
#use a projected coordinate system 
##things are represented in meters instead of latitude and longitude with the projection 
london_proj <- data.frame(x = 53000, y = 180000) %>%
  st_as_sf(coords = c("x", "y"),
           crs = "EPSG:27700")

#check the crs
st_crs(london_proj)

#write a statement to see if this crs matches the original crs
##this is another important step to check when working with spatial data 
st_crs(london_proj) == st_crs(london_sf)

#need to do use a transformation to convert them into the same crs
##can use the st_crs to grab the crs from the sf object with the desired crs and use that crs in the new sf object 
london_sf_transfrom <- st_transform(london_sf, crs = st_crs(london_proj))

```


```{r}
#build a conditional statement to verify that the transformation was successful and print a warning if it doesn't match 
if(st_crs(london_sf_transfrom) == st_crs(london_proj)) {
  print("coordinate reference systems of datasets match")
} else{
  warning("coordinate reference systems do NOT match")
}


#build a conditional statement to verify that the transformation was successful and produce an error if it doesn't match
if(st_crs(london_sf_transfrom) == st_crs(london_proj)) {
  print("coordinate reference systems of datasets match")
} else{
  error("coordinate reference systems do NOT match")
}


```


# Make a Gloabl Map
```{r}
#compare global maps using two different projections 

#map the world with a pseudocylindrical projection
tm_shape(world, projection = 8857) +
  tm_fill(col = "area_km2")

#map the world with the Mercator projection
tm_shape(world, projection = 3395) +
  tm_fill(col = "area_km2")

```



# Vector Attribute Subsetting
```{r}
#dplyr select
#select which columns you want
world %>%
  select(name_long, pop) 

#remove columns
world %>%
  select(-subregion)

#select and rename columns
world %>%
  select(name = name_long, population = pop)

#filter to countries that are a certain size
world1 <- world %>%
  filter(area_km2 > 10000)

#combine different functions (and slice)
world %>%
  filter(continent == "Asia") %>%
  select(name_long, continent, lifeExp) %>%
  slice_max(lifeExp) #picks the row with the max value in that row (picks the country with the highest life expectancy)

#create a dataframe with the total population per continent 
world %>%
  group_by(continent) %>%
  summarise(population = sum(pop, na.rm = TRUE)) %>%
  st_drop_geometry()

```


# Joins with Vector Attributes
```{r}
#load in the coffee data from the spData package
coffee_data <- spData::coffee_data

#check if there is coffee data from all the countries in the world 
##create a conditional dataset that will print out a warning depending on the output
nrow(coffee_data)
nrow(world)

#use a left join - uses the original dataframe and adds on to it
world_coffee <- left_join(world, coffee_data, by = "name_long")

```


# Map of World Coffee
```{r}
#create a map with tmap of the world coffee production in 2017
tm_shape(world_coffee) +
  tm_fill(col = "coffee_production_2017")
```

# Inner Join
```{r}
#inner join only keeps matches between both datasets
##this lost data and only have 45 variables instead of 47
world_coffee_inner <- inner_join(world, coffee_data, by = "name_long")

#check to make sure that you didn't loose data
##if you have fewer rows in the inner join than you lost data from the coffee_data
if(nrow(world_coffee_inner) < nrow(coffee_data)) {
  warning("inner join does not match original data. potential data loss during join")
}


#check which countries are different in the data frames
##what names in coffee_data are not in the world set
setdiff(coffee_data$name_long, world$name_long)

#scan the dataset for a character string which contains Dem and Congo somewhere in the string
drc <- stringr::str_subset(world$name_long, "Dem*.+Congo")


#find the place in the coffee data that has Congo and update it
coffee_data$name_long[stringr::str_detect(coffee_data$name_long, "Congo")] <- drc


#update the world_coffee_inner
world_coffee_inner <- inner_join(world, coffee_data, by = "name_long")

```



# Coffee Production Map
```{r}
#plot just the countries which produce coffee 
tm_shape(world_coffee_inner) +
  tm_polygons(fill = "coffee_production_2017",
              title = "Coffee Production") +
  tm_layout(legend.outside = TRUE)

```


# Left Join with Sf Data
```{r}
#the left join will keep the class of the original object 
coffee_world <- left_join(coffee_data, world, by = "name_long")
class(coffee_world)
```

